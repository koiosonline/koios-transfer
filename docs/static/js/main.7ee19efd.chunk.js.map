{"version":3,"sources":["components/Web3.ts","components/Header.tsx","components/HandleInputs.ts","components/MintTokens.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["web3","Web3","givenProvider","LoadWeb3","a","window","ethereum","newChain","newActs","on","autoRefreshOnNetworkChange","alert","loadContract","tokeninfo","chainId","eth","getChainId","Contract","mintBulkAbi","address","result","chainName","console","log","net","getId","networkId","getAccounts","acts","JSON","stringify","selectChain","param","request","method","params","Header","className","transferlist","addresslist","addElementsToList","addresses","split","i","length","trim","splice","entry","push","getTransferList","getAddressList","MintTokens","accounts","methods","mintBulk","send","from","error","App","React","useState","valueaddresses","setAddressesValue","showTransferList","chain","setChain","contract","setContract","updateTransferList","updatedTransferList","useEffect","handleSubmitButton","FormControl","variant","InputLabel","Select","value","onChange","event","target","chainInfo","paramxDai","paramFantom","label","MenuItem","contractInfo","koiosTestNFTAttendance","koiosTestNFTPresenter","TextField","fullWidth","onClick","map","users","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ee19efd.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\nimport mintBulkAbi from \"../assets/static/mintBulk-abi.json\";\r\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\r\n\r\nexport const LoadWeb3 = async () => {\r\n  if (window.ethereum) {\r\n    window.web3 = new Web3(window.ethereum);\r\n\r\n    await newChain();\r\n    await newActs();\r\n\r\n    window.ethereum.on('accountsChanged', newActs)\r\n    window.ethereum.on('chainChanged', newChain);\r\n    window.ethereum.on('networkChanged', newChain);  // depricated / still used in metamask mobile\r\n    window.ethereum.on('chainIdChanged', newChain);  // depricated / temp workaround\r\n    window.ethereum.autoRefreshOnNetworkChange = false; // temp workaround  // doesn't work on metamask mobile\r\n\r\n  } else {\r\n    window.alert(\"Metamask not detected!\");\r\n  }\r\n};\r\n\r\nconst contractABI = () => {\r\n  const abi = mintBulkAbi;\r\n  return abi;\r\n};\r\n\r\nexport const loadContract = async (tokeninfo: any) => {\r\n  try {\r\n    if (tokeninfo.chainId === await window.web3.eth.getChainId()) {\r\n      const result = await new web3.eth.Contract(contractABI() as any, tokeninfo.address);\r\n      window.mintBulkAbi = result;\r\n    }\r\n    else {\r\n      window.alert(`change your metamask wallet to ${tokeninfo.chainName}`);\r\n      console.log(\"You are on the wrong chain\");\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nconst newChain = async () => {\r\n  let chainId = await window.web3.eth.getChainId();\r\n  let networkId = await window.web3.eth.net.getId();\r\n  console.log(`We are on chain: ${chainId} and network ${networkId}`)\r\n}\r\n\r\nconst newActs = async () => {\r\n  let acts = await web3.eth.getAccounts()\r\n  console.log(`We have accounts: ${JSON.stringify(acts)}`);\r\n}\r\n\r\nexport const selectChain = (param: any) => {\r\n\r\n  window.ethereum.request({ method: 'wallet_addEthereumChain', params: param });\r\n}","export const Header = () => {\r\n    return (\r\n      <header className=\"app-header\">\r\n        <h1>Transfer Titans</h1>\r\n      </header>\r\n    );\r\n  };","let transferlist: any = [];\r\nlet addresslist: any = [];\r\n\r\nexport const addElementsToList = async (addresses: string) => {\r\n  transferlist = [];\r\n  addresslist = [];\r\n  addresslist = addresses.split(',');\r\n  console.log(addresslist);\r\n  for (let i = 0; i < addresslist.length; i++) {\r\n    addresslist[i] = addresslist[i].trim();\r\n    console.log(addresslist[i])\r\n    if (addresslist[i].length !== 42) {\r\n      console.log(\"Removing item\" , addresslist[i], \"from index \", i);\r\n      addresslist.splice(i, 1);\r\n      i--;\r\n    }\r\n    else {\r\n      let entry = { \"address\": addresslist[i] }\r\n      transferlist.push(entry);\r\n    }\r\n  }\r\n}\r\n\r\nexport const getTransferList = async () => {\r\n  return transferlist;\r\n}\r\n\r\nexport const getAddressList = async () => {\r\n  return addresslist;\r\n}","import { getAddressList } from \"./HandleInputs\";\r\n\r\nexport const MintTokens = async () => {\r\n  let accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n  const addresses = await getAddressList();\r\n  console.log(addresses);\r\n  try {\r\n    await window.mintBulkAbi.methods.mintBulk(addresses).send({ from: accounts[0] });\r\n  }\r\n  catch (e) {\r\n    console.error(e);\r\n  }\r\n}","import React from \"react\";\r\nimport { LoadWeb3, selectChain, loadContract } from \"./components/Web3\";\r\nimport { Header } from \"./components/Header\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { addElementsToList, getTransferList } from \"./components/HandleInputs\";\r\nimport { MintTokens } from \"./components/MintTokens\";\r\nimport chainInfo from \"./assets/static/chainInfo.json\";\r\nimport contractInfo from \"./assets/static/contractInfo.json\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    ethereum: any;\r\n    web3: any;\r\n    mintBulkAbi: any;\r\n  }\r\n}\r\n\r\nexport const App = () => {\r\n  LoadWeb3();\r\n\r\n  const [valueaddresses, setAddressesValue] = React.useState('');\r\n  const [transferlist, showTransferList] = React.useState<any[]>([]);\r\n  const [chain, setChain] = React.useState('');\r\n  const [contract, setContract] = React.useState('');\r\n\r\n  const handleChainChange = (event: any) => {\r\n    setChain(event.target.value)\r\n    switch (event.target.value) {\r\n      case \"xDai\":\r\n        selectChain(chainInfo.paramxDai);\r\n        break;\r\n      case \"Fantom\":\r\n        selectChain(chainInfo.paramFantom);\r\n        break;\r\n      default:\r\n        console.log(\"Chain not found\");\r\n    }\r\n  };\r\n\r\n  const handleContractChange = (event: any) => {\r\n    setContract(event.target.value)\r\n    switch (event.target.value) {\r\n      case \"AttTestToken\":\r\n        loadContract(contractInfo.koiosTestNFTAttendance);\r\n        break;\r\n      case \"PresTestToken\":\r\n        loadContract(contractInfo.koiosTestNFTPresenter);\r\n        break;\r\n      default:\r\n        console.log(\"Contract not available\");\r\n    }\r\n  };\r\n\r\n  const handleAddressesChange = (event: any) => {\r\n    setAddressesValue(event.target.value);\r\n  };\r\n\r\n  const updateTransferList = async () => {\r\n    const updatedTransferList = await getTransferList();\r\n    showTransferList(updatedTransferList);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n  });\r\n\r\n  const handleSubmitButton = async () => {\r\n    await addElementsToList(valueaddresses);\r\n    updateTransferList();\r\n  }\r\n\r\n  return (\r\n    <section className=\"home\">\r\n      <section className=\"chain-contract-selection\">\r\n        <div className=\"chain-contract-selection__select\">\r\n          <FormControl variant=\"outlined\" className=\"chain-contract-selection__select-chain-dropdown\">\r\n            <InputLabel>Chain</InputLabel>\r\n            <Select\r\n              value={chain}\r\n              onChange={handleChainChange}\r\n              label=\"Chain\"\r\n            >\r\n              <MenuItem value={\"Rinkeby\"}>Rinkeby</MenuItem>\r\n              <MenuItem value={\"xDai\"}>xDai</MenuItem>\r\n              <MenuItem value={\"Fantom\"}>Fantom</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n\r\n          <FormControl variant=\"outlined\" className=\"chain-contract-selection__select-contract-dropdown\">\r\n            <InputLabel>Contract</InputLabel>\r\n            <Select\r\n              value={contract}\r\n              onChange={handleContractChange}\r\n              label=\"Contract\"\r\n            >\r\n              <MenuItem value={\"AttTestToken\"}>Attendance Test Token</MenuItem>\r\n              <MenuItem value={\"PresTestToken\"}>Presenter Test Token</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n      </section>\r\n      <section className=\"token-section\">\r\n        <Header />\r\n        <div className=\"token-section__inputs\">\r\n          <TextField className=\"token-section__addresses\"\r\n            label=\"Addresses\"\r\n            value={valueaddresses}\r\n            onChange={handleAddressesChange}\r\n            variant=\"outlined\"\r\n            fullWidth />\r\n          <button\r\n            className=\"token-section__submit-button\"\r\n            onClick={() => handleSubmitButton()}\r\n          >\r\n            Submit\r\n          </button>\r\n          <button\r\n            className=\"token-section__mint-button\"\r\n            onClick={() => MintTokens()}\r\n          >\r\n            Mint Tokens\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"token-section__transferlist\">\r\n          <table className=\"token-section__transferlisttable\">\r\n            <thead>\r\n              <tr>\r\n                <th>Address</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {transferlist.map((users: any, index: any) => {\r\n                return (\r\n                  <tr key={index}>\r\n                    <td>{users.address}</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </section>\r\n    </section>\r\n  );\r\n}\r\n\r\n/*\r\n<TextField className=\"token-section__names\"\r\n            label=\"Names\"\r\n            multiline\r\n            value={valuenames}\r\n            onChange={handleNamesChange}\r\n            variant=\"outlined\"\r\n            fullWidth />\r\n*/","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport \"./assets/css/import.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}